generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account?
  Authenticator Authenticator[]
  sessions      Session[]
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Airline {
  id           Int     @id @default(autoincrement())
  name         String
  iata_code    String?
  headquarters String?
  hubs         String?
  country      String?
  logo         String?
  phone        String?
  website      String?
  continent    String?
}

model Airport {
  id                Int     @id @default(autoincrement())
  ident             String?
  type              String?
  name              String?
  latitude_deg      Float?
  longitude_deg     Float?
  elevation_ft      Int?
  continent         String?
  iso_country       String
  iso_region        String?
  municipality      String?
  scheduled_service String?
  gps_code          String?
  iata_code         String?
  local_code        String?
  home_link         String?
  wikipedia_link    String?
  keywords          String? @db.VarChar(1000)
  countries         Country @relation(fields: [iso_country], references: [code])
  regions           Region? @relation(fields: [iso_region], references: [code])

  @@index([iso_country])
  @@index([iso_region])
}

model Country {
  id             Int       @id @default(autoincrement())
  code           String    @unique
  name           String?
  continent      String?
  wikipedia_link String?
  keywords       String?
  airports       Airport[]
}

model Region {
  id             Int       @id @default(autoincrement())
  code           String    @unique
  local_code     String?
  name           String
  continent      String
  iso_country    String
  wikipedia_link String?
  keywords       String?
  airports       Airport[]
}

model Hub {
  id        Int      @id @default(autoincrement())
  airline   String
  iata      String
  airport   String
  city      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     String   @default("")

  @@index([iata])
  @@index([airline])
}

model Time_Zone {
  id        Int      @id @default(autoincrement())
  iata      String
  time_zone String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([iata])
}
